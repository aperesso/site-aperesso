{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport * as THREE from 'three';\nimport { AUDIO_SETTINGS } from './settings';\n\nvar Audio = function Audio() {\n  var _this = this;\n\n  var listener = new THREE.AudioListener();\n  var sound = new THREE.Audio(listener);\n\n  var loadFile = function loadFile() {\n    var loader;\n    return _regeneratorRuntime.async(function loadFile$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            loader = new THREE.AudioLoader();\n            return _context.abrupt(\"return\", new _Promise(function (resolve) {\n              loader.load(\"/assets/audio/\".concat(AUDIO_SETTINGS.file), function (buffer) {\n                return resolve(buffer);\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  var bufferDecrease = new Array(8).fill(0);\n  var frequencyBandsBuffer = new Array(8).fill(0);\n  var frequencyBands = new Array(8).fill(0);\n  var audioBands = new Array(8).fill(0);\n  var audioBandsBuffer = new Array(8).fill(0);\n  var highestFreq = new Array(8).fill(0);\n\n  var updateFrequencyBands = function updateFrequencyBands(samples) {\n    var count = 0;\n\n    for (var i in frequencyBands) {\n      var sampleCount = Math.pow(2, i) * 2;\n      if (i === 7) sampleCount += 2;\n      var average = 0;\n\n      for (var j = 0; j < sampleCount; j++) {\n        average += samples[count] * (count + 1);\n        count++;\n      }\n\n      frequencyBands[i] = average / sampleCount * 10;\n    }\n  };\n\n  var updateFrequencyBandsBuffer = function updateFrequencyBandsBuffer() {\n    for (var i in frequencyBandsBuffer) {\n      if (frequencyBands[i] > frequencyBandsBuffer[i]) {\n        bufferDecrease[i] = 0.005;\n        frequencyBandsBuffer[i] = frequencyBands[i];\n      } else {\n        bufferDecrease[i] *= 1.2;\n        frequencyBandsBuffer[i] -= bufferDecrease[i];\n      }\n    }\n  };\n\n  var updateAudioBands = function updateAudioBands() {\n    for (var i in audioBands) {\n      if (frequencyBands[i] > highestFreq[i]) {\n        highestFreq[i] = frequencyBands[i];\n      }\n\n      audioBands[i] = frequencyBands[i] / (highestFreq[i] || 1);\n      audioBandsBuffer[i] = frequencyBandsBuffer[i] / (highestFreq[i] || 1);\n    }\n  };\n\n  this.load = function _callee() {\n    var buffer;\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(loadFile());\n\n          case 2:\n            buffer = _context2.sent;\n            sound.setBuffer(buffer);\n            sound.setLoop(true);\n            _this.analyzer = new THREE.AudioAnalyser(sound, AUDIO_SETTINGS.ftSize);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n\n  this.update = function () {\n    if (!sound.isPlaying) sound.play();\n\n    var samples = _this.analyzer.getFrequencyData();\n\n    updateFrequencyBands(samples);\n    updateFrequencyBandsBuffer();\n    updateAudioBands();\n  };\n\n  this.getAudioBandsBuffer = function () {\n    return audioBandsBuffer;\n  };\n};\n\nexport default Audio;","map":{"version":3,"sources":["/Users/alexiaperesson/site-aperesso/webgl/utils/audio.js"],"names":["THREE","AUDIO_SETTINGS","Audio","listener","AudioListener","sound","loadFile","loader","AudioLoader","resolve","load","file","buffer","bufferDecrease","Array","fill","frequencyBandsBuffer","frequencyBands","audioBands","audioBandsBuffer","highestFreq","updateFrequencyBands","samples","count","i","sampleCount","Math","pow","average","j","updateFrequencyBandsBuffer","updateAudioBands","setBuffer","setLoop","analyzer","AudioAnalyser","ftSize","update","isPlaying","play","getFrequencyData","getAudioBandsBuffer"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\n\nimport { AUDIO_SETTINGS } from './settings';\n\nconst Audio = function() {\n\n  const listener = new THREE.AudioListener();\n  const sound = new THREE.Audio(listener);\n\n  const loadFile = async () => {\n    const loader = new THREE.AudioLoader();\n    return new Promise(\n      resolve => {\n        loader.load(`/assets/audio/${AUDIO_SETTINGS.file}`,\n          buffer => resolve(buffer)\n        )\n      }\n    )\n  }\n\n  const bufferDecrease = new Array(8).fill(0);\n  const frequencyBandsBuffer = new Array(8).fill(0);\n  const frequencyBands = new Array(8).fill(0);\n  const audioBands = new Array(8).fill(0);\n  const audioBandsBuffer = new Array(8).fill(0);\n  const highestFreq = new Array(8).fill(0);\n\n  const updateFrequencyBands = samples => {\n    let count = 0;\n    for (let i in frequencyBands) {\n      let sampleCount = Math.pow(2, i) * 2;\n      if (i === 7) sampleCount += 2;\n      let average = 0;\n      for (let j = 0; j < sampleCount; j++) {\n        average += samples[count] * (count + 1);\n        count++\n      }\n      frequencyBands[i] = (average / sampleCount) * 10;\n    }\n  }\n\n  const updateFrequencyBandsBuffer = () => {\n    for (let i in frequencyBandsBuffer) {\n      if (frequencyBands[i] > frequencyBandsBuffer[i]) {\n        bufferDecrease[i] = 0.005;\n        frequencyBandsBuffer[i] = frequencyBands[i];\n      } else {\n        bufferDecrease[i] *= 1.2;\n        frequencyBandsBuffer[i] -= bufferDecrease[i];\n      }\n    }\n  }      \n\n  const updateAudioBands = () => {\n    for (let i in audioBands) {\n      if (frequencyBands[i] > highestFreq[i]) {\n        highestFreq[i] = frequencyBands[i]\n      }\n      audioBands[i] = frequencyBands[i] / (highestFreq[i] || 1);\n      audioBandsBuffer[i] = frequencyBandsBuffer [i] / (highestFreq[i] || 1);\n    }\n  }\n\n  this.load = async () => {\n    const buffer = await loadFile();\n    sound.setBuffer(buffer);\n    sound.setLoop(true);\n    this.analyzer = new THREE.AudioAnalyser(sound, AUDIO_SETTINGS.ftSize)\n  }\n\n  this.update = () => {\n    if (!sound.isPlaying) sound.play(); \n    const samples = this.analyzer.getFrequencyData();\n    updateFrequencyBands(samples);\n    updateFrequencyBandsBuffer();\n    updateAudioBands()\n  }\n\n  this.getAudioBandsBuffer = () => audioBandsBuffer;\n\n}\n\nexport default Audio;"]},"metadata":{},"sourceType":"module"}