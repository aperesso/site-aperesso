{"ast":null,"code":"import * as THREE from 'three';\nimport { loadTexture } from '../utils';\nimport { vertexShader, fragmentShader } from '../shaders/particles';\n\nconst Particle = function () {\n  this.radius = Math.random() * 3 + 10.0;\n  this.longitude = Math.random() * Math.PI;\n  this.latitude = Math.random() * Math.PI * 2.0;\n  this.speed = 0.001;\n};\n\nconst Particles = function () {\n  const particlesCount = 500;\n  const array = new Array(particlesCount).fill(null).map(() => new Particle());\n  const positions = new Array(particlesCount * 3).fill(0);\n  const radius = array.map(particle => particle.radius);\n  const longitude = array.map(particle => particle.longitude);\n  const latitude = array.map(particle => particle.latitude);\n  const speed = array.map(particle => particle.speed);\n  const geometry = new THREE.BufferGeometry();\n  geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n  geometry.setAttribute('radius', new THREE.Float32BufferAttribute(radius, 1));\n  geometry.setAttribute('longitude', new THREE.Float32BufferAttribute(longitude, 1));\n  geometry.setAttribute('latitude', new THREE.Float32BufferAttribute(latitude, 1));\n  geometry.setAttribute('speed', new THREE.Float32BufferAttribute(speed, 1));\n\n  this.setUp = async audio => {\n    this.audio = audio;\n    const texture = await loadTexture('smoke.png');\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        uAudioBandsBuffer: {\n          value: new Array(8).fill(0)\n        },\n        pointTexture: {\n          value: texture\n        },\n        opacity: {\n          value: 0.1\n        },\n        time: {\n          value: 0.0\n        }\n      },\n      vertexShader,\n      fragmentShader\n    });\n    material.transparent = true;\n    material.depthWrite = false;\n    material.blending = THREE.AdditiveBlending;\n    this.points = new THREE.Points(geometry, material);\n  };\n\n  this.update = () => {\n    const longitudes = this.points.geometry.attributes.longitude.array;\n    const latitudes = this.points.geometry.attributes.longitude.array;\n\n    for (let i in longitudes) {\n      longitudes[i] += array[i].speed;\n      latitudes[i] += array[i].speed;\n    }\n\n    this.points.geometry.attributes.longitude.needsUpdate = true;\n    this.points.geometry.attributes.latitude.needsUpdate = true;\n    this.points.material.uniforms[\"uAudioBandsBuffer\"].value = this.audio.getAudioBandsBuffer();\n  };\n};\n\nexport default Particles;","map":{"version":3,"sources":["/Users/alexiaperesson/site-aperesso/webgl/scene/particles.js"],"names":["THREE","loadTexture","vertexShader","fragmentShader","Particle","radius","Math","random","longitude","PI","latitude","speed","Particles","particlesCount","array","Array","fill","map","positions","particle","geometry","BufferGeometry","setAttribute","Float32BufferAttribute","setUp","audio","texture","material","ShaderMaterial","uniforms","uAudioBandsBuffer","value","pointTexture","opacity","time","transparent","depthWrite","blending","AdditiveBlending","points","Points","update","longitudes","attributes","latitudes","i","needsUpdate","getAudioBandsBuffer"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\n\nimport { loadTexture } from '../utils';\nimport { vertexShader, fragmentShader } from '../shaders/particles';\n\nconst Particle = function() {\n  this.radius = Math.random() * 3 + 10.0;\n  this.longitude = Math.random() * Math.PI;\n  this.latitude = Math.random() * Math.PI * 2.0;\n  this.speed = 0.001;\n}\n\nconst Particles = function() {\n  const particlesCount = 500;\n  const array = new Array(particlesCount).fill(null).map(() => new Particle())\n  const positions = new Array(particlesCount * 3).fill(0);\n  const radius = array.map(particle => particle.radius);\n  const longitude = array.map(particle => particle.longitude);\n  const latitude = array.map(particle => particle.latitude);\n  const speed = array.map(particle => particle.speed);\n\n  const geometry = new THREE.BufferGeometry();    \n  geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );\n  geometry.setAttribute( 'radius', new THREE.Float32BufferAttribute( radius, 1 ) );\n  geometry.setAttribute( 'longitude', new THREE.Float32BufferAttribute( longitude, 1 ) );\n  geometry.setAttribute( 'latitude', new THREE.Float32BufferAttribute( latitude, 1 ) );\n  geometry.setAttribute( 'speed', new THREE.Float32BufferAttribute( speed, 1 ) );\n\n  this.setUp = async audio => {\n    this.audio = audio;\n    const texture = await loadTexture('smoke.png');\n\n    const material = new THREE.ShaderMaterial({\n      uniforms : {\n          uAudioBandsBuffer : { value : new Array(8).fill(0) },\n          pointTexture : { value : texture },\n          opacity : { value : 0.1 },\n          time : { value : 0.0 }\n      },\n      vertexShader,\n      fragmentShader\n    })\n\n    material.transparent = true;\n    material.depthWrite = false;\n    material.blending = THREE.AdditiveBlending;\n\n    this.points = new THREE.Points(\n        geometry, \n        material,\n    );\n  }\n\n  this.update = () => {\n    const longitudes = this.points.geometry.attributes.longitude.array;\n    const latitudes = this.points.geometry.attributes.longitude.array;\n    \n    for (let i in longitudes) {\n        longitudes[i] += array[i].speed;\n        latitudes[i] += array[i].speed;\n    }\n    \n    this.points.geometry.attributes.longitude.needsUpdate = true;\n    this.points.geometry.attributes.latitude.needsUpdate = true;\n\n    this.points.material.uniforms[\"uAudioBandsBuffer\"].value = this.audio.getAudioBandsBuffer();\n  }\n}\n\nexport default Particles;"]},"metadata":{},"sourceType":"module"}