{"ast":null,"code":"import * as THREE from 'three';\nimport { loadTexture } from '../utils';\nimport { vertexShader, fragmentShader } from '../shaders/particles';\n\nconst Particles = function () {\n  const particlesCount = 100;\n  const plane = new THREE.PlaneBufferGeometry(15, 15);\n  const geo = new THREE.InstancedBufferGeometry();\n  geo.index = plane.index;\n  geo.attributes = plane.attributes;\n  const translate = new Float32Array(particlesCount * 3);\n  const longitude = new Float32Array(particlesCount);\n  const indice = new Float32Array(particlesCount);\n\n  for (let i = 0, i3 = 0; i < particlesCount; i++, i3 += 3) {\n    translate[i3 + 0] = Math.random() * 100 - 50;\n    translate[i3 + 1] = Math.random() * 100 - 50;\n    translate[i3 + 2] = -Math.random(30) - 10;\n    longitude[i] = Math.random() * Math.PI;\n    indice[i] = i % 8;\n  }\n\n  geo.setAttribute('translate', new THREE.InstancedBufferAttribute(translate, 3));\n  geo.setAttribute('longitude', new THREE.InstancedBufferAttribute(longitude, 1));\n  geo.setAttribute('indice', new THREE.InstancedBufferAttribute(indice, 1));\n\n  this.setUp = async audio => {\n    this.audio = audio;\n    const texture = await loadTexture('smoke.png');\n    const material = new THREE.RawShaderMaterial({\n      uniforms: {\n        opacity: {\n          value: 0.1\n        },\n        texture: {\n          value: texture\n        },\n        time: {\n          value: 0.0\n        },\n        uAudioBandsBuffer: {\n          value: new Array(8).fill(null)\n        }\n      },\n      vertexShader,\n      fragmentShader\n    });\n    material.transparent = true;\n    material.depthWrite = false;\n    material.blending = THREE.AdditiveBlending;\n    material.side = THREE.DoubleSide;\n    this.points = new THREE.Mesh(geo, material);\n  };\n\n  this.update = () => {\n    this.points.material.uniforms[\"time\"].value += 0.01;\n    this.points.material.uniforms[\"uAudioBandsBuffer\"].value = this.audio.getAudioBandsBuffer();\n  };\n};\n\nexport default Particles;","map":{"version":3,"sources":["/Users/alexiaperesson/site-aperesso/webgl/scene/particles.js"],"names":["THREE","loadTexture","vertexShader","fragmentShader","Particles","particlesCount","plane","PlaneBufferGeometry","geo","InstancedBufferGeometry","index","attributes","translate","Float32Array","longitude","indice","i","i3","Math","random","PI","setAttribute","InstancedBufferAttribute","setUp","audio","texture","material","RawShaderMaterial","uniforms","opacity","value","time","uAudioBandsBuffer","Array","fill","transparent","depthWrite","blending","AdditiveBlending","side","DoubleSide","points","Mesh","update","getAudioBandsBuffer"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\n\nimport { loadTexture } from '../utils';\nimport { vertexShader, fragmentShader } from '../shaders/particles';\n\n\nconst Particles = function() {\n  const particlesCount = 100;\n\n  const plane = new THREE.PlaneBufferGeometry(15,15);\n  const geo= new THREE.InstancedBufferGeometry();\n  geo.index = plane.index;\n  geo.attributes = plane.attributes;\n\n  const translate = new Float32Array( particlesCount * 3 );\n  const longitude = new Float32Array( particlesCount );\n  const indice = new Float32Array( particlesCount );\n  \n  for ( let i = 0, i3 = 0; i < particlesCount; i ++, i3 += 3 ) {\n      translate[ i3 + 0 ] = Math.random() * 100 - 50;\n      translate[ i3 + 1 ] = Math.random() * 100 - 50;\n      translate[ i3 + 2 ] = -Math.random(30) - 10;\n\n      longitude[i] = Math.random() * Math.PI;\n      indice[i] = i % 8;\n  }\n\n  geo.setAttribute( 'translate', new THREE.InstancedBufferAttribute( translate, 3 ) );\n  geo.setAttribute( 'longitude', new THREE.InstancedBufferAttribute( longitude, 1 ) );\n  geo.setAttribute( 'indice', new THREE.InstancedBufferAttribute( indice, 1 ) );\n\n\n\n  this.setUp = async audio => {\n    this.audio = audio;\n    const texture = await loadTexture('smoke.png');\n    const material = new THREE.RawShaderMaterial({\n        uniforms : {\n            opacity : { value : 0.1 },\n            texture : { value : texture },\n            time : { value : 0.0 },\n            uAudioBandsBuffer : { value : new Array(8).fill(null)}\n        },\n        vertexShader,\n        fragmentShader\n    })\n    material.transparent = true;\n    material.depthWrite = false;\n    material.blending = THREE.AdditiveBlending;\n    material.side = THREE.DoubleSide;\n\n    this.points = new THREE.Mesh(\n        geo, \n        material,\n    );\n    \n  }\n\n  this.update = () => {\n    this.points.material.uniforms[\"time\"].value += 0.01;\n    this.points.material.uniforms[\"uAudioBandsBuffer\"].value = this.audio.getAudioBandsBuffer();\n  }\n}\n\nexport default Particles;"]},"metadata":{},"sourceType":"module"}