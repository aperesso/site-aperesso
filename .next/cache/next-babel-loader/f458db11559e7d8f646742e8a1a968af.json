{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\nimport { ShaderMaterial, UniformsUtils } from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { FilmShader } from \"../shaders/FilmShader.js\";\n\nvar FilmPass = function FilmPass(noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale) {\n  Pass.call(this);\n  if (FilmShader === undefined) console.error(\"FilmPass relies on FilmShader\");\n  var shader = FilmShader;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  if (grayscale !== undefined) this.uniforms.grayscale.value = grayscale;\n  if (noiseIntensity !== undefined) this.uniforms.nIntensity.value = noiseIntensity;\n  if (scanlinesIntensity !== undefined) this.uniforms.sIntensity.value = scanlinesIntensity;\n  if (scanlinesCount !== undefined) this.uniforms.sCount.value = scanlinesCount;\n  this.fsQuad = new Pass.FullScreenQuad(this.material);\n};\n\nFilmPass.prototype = _Object$assign(_Object$create(Pass.prototype), {\n  constructor: FilmPass,\n  render: function render(renderer, writeBuffer, readBuffer, deltaTime\n  /*, maskActive */\n  ) {\n    this.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.uniforms[\"time\"].value += deltaTime;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n});\nexport { FilmPass };","map":{"version":3,"sources":["/Users/alexiaperesson/site-aperesso/node_modules/three/examples/jsm/postprocessing/FilmPass.js"],"names":["ShaderMaterial","UniformsUtils","Pass","FilmShader","FilmPass","noiseIntensity","scanlinesIntensity","scanlinesCount","grayscale","call","undefined","console","error","shader","uniforms","clone","material","vertexShader","fragmentShader","value","nIntensity","sIntensity","sCount","fsQuad","FullScreenQuad","prototype","constructor","render","renderer","writeBuffer","readBuffer","deltaTime","texture","renderToScreen","setRenderTarget","clear"],"mappings":";;;AAAA;;;AAIA,SACCA,cADD,EAECC,aAFD,QAGO,gCAHP;AAIA,SAASC,IAAT,QAAqB,2BAArB;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,IAAIC,QAAQ,GAAG,SAAXA,QAAW,CAAWC,cAAX,EAA2BC,kBAA3B,EAA+CC,cAA/C,EAA+DC,SAA/D,EAA2E;AAEzFN,EAAAA,IAAI,CAACO,IAAL,CAAW,IAAX;AAEA,MAAKN,UAAU,KAAKO,SAApB,EACCC,OAAO,CAACC,KAAR,CAAe,+BAAf;AAED,MAAIC,MAAM,GAAGV,UAAb;AAEA,OAAKW,QAAL,GAAgBb,aAAa,CAACc,KAAd,CAAqBF,MAAM,CAACC,QAA5B,CAAhB;AAEA,OAAKE,QAAL,GAAgB,IAAIhB,cAAJ,CAAoB;AAEnCc,IAAAA,QAAQ,EAAE,KAAKA,QAFoB;AAGnCG,IAAAA,YAAY,EAAEJ,MAAM,CAACI,YAHc;AAInCC,IAAAA,cAAc,EAAEL,MAAM,CAACK;AAJY,GAApB,CAAhB;AAQA,MAAKV,SAAS,KAAKE,SAAnB,EAA+B,KAAKI,QAAL,CAAcN,SAAd,CAAwBW,KAAxB,GAAgCX,SAAhC;AAC/B,MAAKH,cAAc,KAAKK,SAAxB,EAAoC,KAAKI,QAAL,CAAcM,UAAd,CAAyBD,KAAzB,GAAiCd,cAAjC;AACpC,MAAKC,kBAAkB,KAAKI,SAA5B,EAAwC,KAAKI,QAAL,CAAcO,UAAd,CAAyBF,KAAzB,GAAiCb,kBAAjC;AACxC,MAAKC,cAAc,KAAKG,SAAxB,EAAoC,KAAKI,QAAL,CAAcQ,MAAd,CAAqBH,KAArB,GAA6BZ,cAA7B;AAEpC,OAAKgB,MAAL,GAAc,IAAIrB,IAAI,CAACsB,cAAT,CAAyB,KAAKR,QAA9B,CAAd;AAEA,CA1BD;;AA4BAZ,QAAQ,CAACqB,SAAT,GAAqB,eAAe,eAAevB,IAAI,CAACuB,SAApB,CAAf,EAAgD;AAEpEC,EAAAA,WAAW,EAAEtB,QAFuD;AAIpEuB,EAAAA,MAAM,EAAE,gBAAWC,QAAX,EAAqBC,WAArB,EAAkCC,UAAlC,EAA8CC;AAAU;AAAxD,IAA4E;AAEnF,SAAKjB,QAAL,CAAe,UAAf,EAA4BK,KAA5B,GAAoCW,UAAU,CAACE,OAA/C;AACA,SAAKlB,QAAL,CAAe,MAAf,EAAwBK,KAAxB,IAAiCY,SAAjC;;AAEA,QAAK,KAAKE,cAAV,EAA2B;AAE1BL,MAAAA,QAAQ,CAACM,eAAT,CAA0B,IAA1B;AACA,WAAKX,MAAL,CAAYI,MAAZ,CAAoBC,QAApB;AAEA,KALD,MAKO;AAENA,MAAAA,QAAQ,CAACM,eAAT,CAA0BL,WAA1B;AACA,UAAK,KAAKM,KAAV,EAAkBP,QAAQ,CAACO,KAAT;AAClB,WAAKZ,MAAL,CAAYI,MAAZ,CAAoBC,QAApB;AAEA;AAED;AAtBmE,CAAhD,CAArB;AA0BA,SAASxB,QAAT","sourcesContent":["/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tShaderMaterial,\n\tUniformsUtils\n} from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { FilmShader } from \"../shaders/FilmShader.js\";\n\nvar FilmPass = function ( noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale ) {\n\n\tPass.call( this );\n\n\tif ( FilmShader === undefined )\n\t\tconsole.error( \"FilmPass relies on FilmShader\" );\n\n\tvar shader = FilmShader;\n\n\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\tthis.material = new ShaderMaterial( {\n\n\t\tuniforms: this.uniforms,\n\t\tvertexShader: shader.vertexShader,\n\t\tfragmentShader: shader.fragmentShader\n\n\t} );\n\n\tif ( grayscale !== undefined )\tthis.uniforms.grayscale.value = grayscale;\n\tif ( noiseIntensity !== undefined ) this.uniforms.nIntensity.value = noiseIntensity;\n\tif ( scanlinesIntensity !== undefined ) this.uniforms.sIntensity.value = scanlinesIntensity;\n\tif ( scanlinesCount !== undefined ) this.uniforms.sCount.value = scanlinesCount;\n\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\n\n};\n\nFilmPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: FilmPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime /*, maskActive */ ) {\n\n\t\tthis.uniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\t\tthis.uniforms[ \"time\" ].value += deltaTime;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n} );\n\nexport { FilmPass };\n"]},"metadata":{},"sourceType":"module"}