{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport * as THREE from 'three';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\nimport { BloomPass } from 'three/examples/jsm/postprocessing/BloomPass';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { CAMERA_SETTINGS } from './utils/settings';\nimport Audio from './utils/audio';\nimport { getDimensions } from './utils';\nimport Sphere from './scene/sphere';\nimport Particles from './scene/particles';\n\nvar WebGL = function WebGL() {\n  var canvas = document.getElementById('webGL');\n\n  var _getDimensions = getDimensions('webGL'),\n      width = _getDimensions.width,\n      height = _getDimensions.height;\n\n  var scene = new THREE.Scene();\n  var camera = new THREE.PerspectiveCamera(CAMERA_SETTINGS.fov, width / height, CAMERA_SETTINGS.near, CAMERA_SETTINGS.far);\n  camera.position.set(0, 0, 20);\n  var renderer = new THREE.WebGLRenderer({\n    canvas: canvas,\n    alpha: true\n  });\n  renderer.setSize(width, height);\n  renderer.setClearColor(new THREE.Color('#010101'), 1.);\n  renderer.shadowMap.enabled = true;\n  renderer.gammaFactor = 2.2;\n  renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n  renderer.toneMapping = THREE.ReinhardToneMapping;\n  var composer = new EffectComposer(renderer);\n  composer.setSize(width, height);\n  var renderScene = new RenderPass(scene, camera);\n  composer.addPass(renderScene);\n  var bloomPass = new BloomPass(10.);\n  composer.addPass(bloomPass);\n  var filmPass = new FilmPass(0.35, 0.25, 648, false);\n  composer.addPass(filmPass);\n  var audio = new Audio();\n  var sphere = new Sphere();\n  var particles = new Particles();\n\n  this.load = function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(audio.load());\n\n          case 2:\n            sphere.setUp(audio);\n            scene.add(sphere.mesh);\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(particles.setUp(audio));\n\n          case 6:\n            scene.add(particles.points);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  this.render = function () {\n    renderer.setAnimationLoop(function () {\n      audio.update();\n      sphere.update();\n      particles.update(); // renderer.render(scene, camera);\n\n      composer.render();\n    });\n  };\n};\n\nexport default WebGL;","map":{"version":3,"sources":["/Users/alexiaperesson/site-aperesso/webgl/index.js"],"names":["THREE","EffectComposer","FilmPass","BloomPass","RenderPass","CAMERA_SETTINGS","Audio","getDimensions","Sphere","Particles","WebGL","canvas","document","getElementById","width","height","scene","Scene","camera","PerspectiveCamera","fov","near","far","position","set","renderer","WebGLRenderer","alpha","setSize","setClearColor","Color","shadowMap","enabled","gammaFactor","type","PCFSoftShadowMap","toneMapping","ReinhardToneMapping","composer","renderScene","addPass","bloomPass","filmPass","audio","sphere","particles","load","setUp","add","mesh","points","render","setAnimationLoop","update"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\nimport { BloomPass } from 'three/examples/jsm/postprocessing/BloomPass';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\n\nimport { CAMERA_SETTINGS } from './utils/settings';\nimport Audio from './utils/audio';\nimport { getDimensions } from './utils';\n\nimport Sphere from './scene/sphere';\nimport Particles from './scene/particles';\n\n\nconst WebGL = function() {\n  const canvas = document.getElementById('webGL');\n  const { width , height } = getDimensions('webGL');\n\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(CAMERA_SETTINGS.fov, width / height, CAMERA_SETTINGS.near, CAMERA_SETTINGS.far);\n  camera.position.set(0,0,20);\n\n  const renderer = new THREE.WebGLRenderer({ canvas , alpha: true });\n  renderer.setSize(width, height);\n  renderer.setClearColor(new THREE.Color('#010101'), 1.);\n  renderer.shadowMap.enabled = true;\n  renderer.gammaFactor = 2.2;\n  renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n  renderer.toneMapping = THREE.ReinhardToneMapping;\n\n  const composer = new EffectComposer(renderer);\n  composer.setSize(width, height);\n\n  const renderScene = new RenderPass(scene, camera);\n  composer.addPass(renderScene);\n\n  const bloomPass = new BloomPass(10.);\n  composer.addPass(bloomPass);\n\n  const filmPass = new FilmPass(0.35,0.25, 648, false);\n  composer.addPass(filmPass)\n\n  const audio = new Audio();\n  const sphere = new Sphere();\n  const particles = new Particles();\n\n  this.load = async () => {\n    await audio.load();\n    sphere.setUp(audio);\n    scene.add(sphere.mesh);\n    await particles.setUp(audio);\n    scene.add(particles.points);\n  }\n\n  this.render = () => {\n    renderer.setAnimationLoop(\n      () => {\n        audio.update();\n        sphere.update();\n        particles.update();\n        // renderer.render(scene, camera);\n        composer.render();\n      }\n    )\n  }\n}\n\nexport default WebGL;"]},"metadata":{},"sourceType":"module"}