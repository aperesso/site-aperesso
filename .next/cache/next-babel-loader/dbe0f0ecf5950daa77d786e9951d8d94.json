{"ast":null,"code":"var vertexShader = \"\\nconst float size = 1000.0;\\n\\nattribute float radius;\\nattribute float longitude;\\nattribute float latitude;\\nattribute float speed;\\n\\nuniform float time;\\nuniform float uAudioBandsBuffer[8];\\n\\nvarying float average;\\n\\nvoid main() {\\n\\n    float x = radius * sin(longitude ) * cos(latitude);\\n    float y = radius * sin(longitude) * sin(latitude);\\n    float z = radius * cos(longitude) - 10.;\\n\\n    vec3 pos = vec3(x,y,z);\\n   \\n    vec4 mvPosition = modelViewMatrix * vec4( pos, 1.0 ) ;\\n    gl_PointSize = size;\\n    gl_Position = projectionMatrix * mvPosition;\\n}\\n\";\nvar fragmentShader = \"\\nuniform sampler2D pointTexture;\\nuniform float opacity;\\n\\nvarying float average;\\nuniform float uAudioBandsBuffer[8];\\n\\nvoid main() {\\n\\n \\n    vec4    tex = texture2D( pointTexture, gl_PointCoord );\\n    \\n    vec3 color = mix(\\n        vec3(max(uAudioBandsBuffer[0], 0.2)), \\n        tex.xyz,\\n        0.5\\n    );\\n    gl_FragColor = opacity * vec4(color, tex.a);\\n}\\n\";\nexport { vertexShader, fragmentShader };","map":{"version":3,"sources":["/Users/alexiaperesson/site-aperesso/webgl/shaders/particles.js"],"names":["vertexShader","fragmentShader"],"mappings":"AAAA,IAAMA,YAAY,okBAAlB;AA2BA,IAAMC,cAAc,2XAApB;AAqBA,SACED,YADF,EAEEC,cAFF","sourcesContent":["const vertexShader = `\nconst float size = 1000.0;\n\nattribute float radius;\nattribute float longitude;\nattribute float latitude;\nattribute float speed;\n\nuniform float time;\nuniform float uAudioBandsBuffer[8];\n\nvarying float average;\n\nvoid main() {\n\n    float x = radius * sin(longitude ) * cos(latitude);\n    float y = radius * sin(longitude) * sin(latitude);\n    float z = radius * cos(longitude) - 10.;\n\n    vec3 pos = vec3(x,y,z);\n   \n    vec4 mvPosition = modelViewMatrix * vec4( pos, 1.0 ) ;\n    gl_PointSize = size;\n    gl_Position = projectionMatrix * mvPosition;\n}\n`\n\nconst fragmentShader = `\nuniform sampler2D pointTexture;\nuniform float opacity;\n\nvarying float average;\nuniform float uAudioBandsBuffer[8];\n\nvoid main() {\n\n \n    vec4    tex = texture2D( pointTexture, gl_PointCoord );\n    \n    vec3 color = mix(\n        vec3(max(uAudioBandsBuffer[0], 0.2)), \n        tex.xyz,\n        0.5\n    );\n    gl_FragColor = opacity * vec4(color, tex.a);\n}\n`\n\nexport {\n  vertexShader,\n  fragmentShader\n}"]},"metadata":{},"sourceType":"module"}