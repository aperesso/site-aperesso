{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport * as THREE from \"three\";\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport { fragmentShader, vertexShader } from '../shaders/sphere';\nimport { SPHERE_SETTINGS } from '../utils/settings';\n\nvar Sphere = function Sphere() {\n  var _this = this;\n\n  var uniforms = {\n    uAudioBandsBuffer: {\n      value: new Array(8).fill(0)\n    },\n    uNoiseScale: {\n      value: SPHERE_SETTINGS.noiseScale\n    },\n    uNoiseFrequency: {\n      value: SPHERE_SETTINGS.noiseFrequency\n    },\n    uNoiseOffset: {\n      value: SPHERE_SETTINGS.noiseOffset\n    },\n    uTime: {\n      value: 1.0\n    },\n    uMaterialAmbientA: {\n      value: new THREE.Color(SPHERE_SETTINGS.materialAmbientA)\n    },\n    uMaterialAmbientB: {\n      value: new THREE.Color(SPHERE_SETTINGS.materialAmbientB)\n    },\n    uMaterialSpecularA: {\n      value: new THREE.Color(SPHERE_SETTINGS.materialSpecularA)\n    },\n    uMaterialSpecularB: {\n      value: new THREE.Color(SPHERE_SETTINGS.materialSpecularB)\n    },\n    uMaterialDiffuseA: {\n      value: new THREE.Color(SPHERE_SETTINGS.materialDiffuseA)\n    },\n    uMaterialDiffuseB: {\n      value: new THREE.Color(SPHERE_SETTINGS.materialDiffuseB)\n    },\n    uMaterialShininess: {\n      value: SPHERE_SETTINGS.materialShininess\n    },\n    uLightAmbient: {\n      value: new THREE.Color(SPHERE_SETTINGS.lightAmbient)\n    },\n    uLightDiffuse: {\n      value: new THREE.Color(SPHERE_SETTINGS.lightDiffuse)\n    },\n    uLightSpecular: {\n      value: new THREE.Color(SPHERE_SETTINGS.lightSpecular)\n    },\n    uLightPosition: {\n      value: SPHERE_SETTINGS.lightPosition\n    }\n  };\n\n  this.setUp = function _callee(audio) {\n    var geometry, material;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _this.audio = audio;\n            geometry = new THREE.SphereBufferGeometry(SPHERE_SETTINGS.radius, SPHERE_SETTINGS.segments, SPHERE_SETTINGS.segments);\n            BufferGeometryUtils.computeTangents(geometry);\n            material = new THREE.ShaderMaterial({\n              uniforms: uniforms,\n              fragmentShader: fragmentShader,\n              vertexShader: vertexShader\n            });\n            _this.mesh = new THREE.Mesh(geometry, material);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  this.update = function () {\n    _this.mesh.material.uniforms[\"uTime\"].value += 0.001;\n    _this.mesh.material.uniforms[\"uNoiseOffset\"].value.x += 0.02;\n    _this.mesh.material.uniforms[\"uNoiseOffset\"].value.y += 0.02;\n    _this.mesh.material.uniforms[\"uNoiseOffset\"].value.z += 0.02;\n    _this.mesh.material.uniforms[\"uAudioBandsBuffer\"].value = _this.audio.getAudioBandsBuffer();\n  };\n};\n\nexport default Sphere;","map":{"version":3,"sources":["/Users/alexiaperesson/site-aperesso/webgl/scene/sphere.js"],"names":["THREE","BufferGeometryUtils","fragmentShader","vertexShader","SPHERE_SETTINGS","Sphere","uniforms","uAudioBandsBuffer","value","Array","fill","uNoiseScale","noiseScale","uNoiseFrequency","noiseFrequency","uNoiseOffset","noiseOffset","uTime","uMaterialAmbientA","Color","materialAmbientA","uMaterialAmbientB","materialAmbientB","uMaterialSpecularA","materialSpecularA","uMaterialSpecularB","materialSpecularB","uMaterialDiffuseA","materialDiffuseA","uMaterialDiffuseB","materialDiffuseB","uMaterialShininess","materialShininess","uLightAmbient","lightAmbient","uLightDiffuse","lightDiffuse","uLightSpecular","lightSpecular","uLightPosition","lightPosition","setUp","audio","geometry","SphereBufferGeometry","radius","segments","computeTangents","material","ShaderMaterial","mesh","Mesh","update","x","y","z","getAudioBandsBuffer"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\nimport { fragmentShader, vertexShader } from '../shaders/sphere';\nimport { SPHERE_SETTINGS  } from '../utils/settings';\n\nconst Sphere = function() {\n\n  const uniforms = {\n    uAudioBandsBuffer : { value : new Array(8).fill(0) },\n    uNoiseScale : { value : SPHERE_SETTINGS.noiseScale },\n    uNoiseFrequency : { value : SPHERE_SETTINGS.noiseFrequency },\n    uNoiseOffset : { value : SPHERE_SETTINGS.noiseOffset },\n    uTime : { value : 1.0 },\n    uMaterialAmbientA : { value : new THREE.Color(SPHERE_SETTINGS.materialAmbientA)},\n    uMaterialAmbientB : { value : new THREE.Color(SPHERE_SETTINGS.materialAmbientB)},\n    uMaterialSpecularA : { value : new THREE.Color(SPHERE_SETTINGS.materialSpecularA) },\n    uMaterialSpecularB : { value : new THREE.Color(SPHERE_SETTINGS.materialSpecularB) },\n    uMaterialDiffuseA : { value : new THREE.Color(SPHERE_SETTINGS.materialDiffuseA)},\n    uMaterialDiffuseB : { value : new THREE.Color(SPHERE_SETTINGS.materialDiffuseB)},\n    uMaterialShininess : { value : SPHERE_SETTINGS.materialShininess },\n    uLightAmbient : { value : new THREE.Color(SPHERE_SETTINGS.lightAmbient) },\n    uLightDiffuse : { value : new THREE.Color(SPHERE_SETTINGS.lightDiffuse) },\n    uLightSpecular : { value : new THREE.Color(SPHERE_SETTINGS.lightSpecular) },\n    uLightPosition : { value : SPHERE_SETTINGS.lightPosition }\n  }\n  \n  this.setUp = async audio => {\n    this.audio = audio;\n    const geometry = new THREE.SphereBufferGeometry(SPHERE_SETTINGS.radius, SPHERE_SETTINGS.segments, SPHERE_SETTINGS.segments);\n    BufferGeometryUtils.computeTangents(geometry);\n    const material = new THREE.ShaderMaterial({\n      uniforms,\n      fragmentShader,\n      vertexShader\n    });\n    this.mesh = new THREE.Mesh(geometry, material);\n  }\n\n  this.update = () => {\n    this.mesh.material.uniforms[\"uTime\"].value += 0.001;\n    this.mesh.material.uniforms[\"uNoiseOffset\"].value.x += 0.02;\n    this.mesh.material.uniforms[\"uNoiseOffset\"].value.y += 0.02;\n    this.mesh.material.uniforms[\"uNoiseOffset\"].value.z += 0.02;\n    this.mesh.material.uniforms[\"uAudioBandsBuffer\"].value = this.audio.getAudioBandsBuffer();    \n  }\n}\n\nexport default Sphere;"]},"metadata":{},"sourceType":"module"}