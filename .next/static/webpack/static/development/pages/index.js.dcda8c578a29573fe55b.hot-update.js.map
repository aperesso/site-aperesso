{"version":3,"file":"static/webpack/static/development/pages/index.js.dcda8c578a29573fe55b.hot-update.js","sources":["webpack:///./webgl/scene/particles.js"],"sourcesContent":["import * as THREE from 'three'\n\nimport { loadTexture } from '../utils';\nimport { vertexShader, fragmentShader } from '../shaders/particles';\n\n\nconst Particles = function() {\n  const particlesCount = 300;\n\n  const plane = new THREE.PlaneBufferGeometry(15,15);\n  const geo= new THREE.InstancedBufferGeometry();\n  geo.index = plane.index;\n  geo.attributes = plane.attributes;\n\n  const translate = new Float32Array( particlesCount * 3 );\n  const longitude = new Float32Array( particlesCount );\n  const indice = new Float32Array( particlesCount );\n  \n  for ( let i = 0, i3 = 0; i < particlesCount; i ++, i3 += 3 ) {\n      translate[ i3 + 0 ] = Math.random() * 100 - 50;\n      translate[ i3 + 1 ] = Math.random() * 100 - 50;\n      translate[ i3 + 2 ] = -Math.random(30) - 10;\n\n      longitude[i] = Math.random() * Math.PI;\n      indice[i] = i % 8;\n  }\n\n  geo.setAttribute( 'translate', new THREE.InstancedBufferAttribute( translate, 3 ) );\n  geo.setAttribute( 'longitude', new THREE.InstancedBufferAttribute( longitude, 1 ) );\n  geo.setAttribute( 'indice', new THREE.InstancedBufferAttribute( indice, 1 ) );\n\n\n\n  this.setUp = async audio => {\n    this.audio = audio;\n    const texture = await loadTexture('smoke.png');\n    const material = new THREE.RawShaderMaterial({\n        uniforms : {\n            opacity : { value : 0.1 },\n            texture : { value : texture },\n            time : { value : 0.0 },\n            uAudioBandsBuffer : { value : new Array(8).fill(null)}\n        },\n        vertexShader,\n        fragmentShader\n    })\n    material.transparent = true;\n    material.depthWrite = false;\n    material.blending = THREE.AdditiveBlending;\n    material.side = THREE.DoubleSide;\n\n    this.points = new THREE.Mesh(\n        geo, \n        material,\n    );\n    \n  }\n\n  this.update = () => {\n    this.points.material.uniforms[\"time\"].value += 0.01;\n    this.points.material.uniforms[\"uAudioBandsBuffer\"].value = this.audio.getAudioBandsBuffer();\n  }\n}\n\nexport default Particles;"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AARA;AAUA;AACA;AACA;AACA;AAEA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}