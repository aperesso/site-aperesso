{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport * as THREE from 'three';\nimport { loadTexture } from '../utils';\nimport { vertexShader, fragmentShader } from '../shaders/particles';\n\nvar Particle = function Particle() {\n  this.radius = Math.random() * 6 + 10.0;\n  this.longitude = Math.random() * Math.PI;\n  this.latitude = Math.random() * Math.PI * 2.0;\n  this.speed = 0.001;\n};\n\nvar Particles = function Particles() {\n  var _this = this;\n\n  var particlesCount = 500;\n  var array = new Array(particlesCount).fill(null).map(function () {\n    return new Particle();\n  });\n  var positions = new Array(particlesCount * 3).fill(0);\n  var radius = array.map(function (particle) {\n    return particle.radius;\n  });\n  var longitude = array.map(function (particle) {\n    return particle.longitude;\n  });\n  var latitude = array.map(function (particle) {\n    return particle.latitude;\n  });\n  var speed = array.map(function (particle) {\n    return particle.speed;\n  });\n  var geometry = new THREE.BufferGeometry();\n  geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n  geometry.setAttribute('radius', new THREE.Float32BufferAttribute(radius, 1));\n  geometry.setAttribute('longitude', new THREE.Float32BufferAttribute(longitude, 1));\n  geometry.setAttribute('latitude', new THREE.Float32BufferAttribute(latitude, 1));\n  geometry.setAttribute('speed', new THREE.Float32BufferAttribute(speed, 1));\n\n  this.setUp = function _callee(audio) {\n    var texture, material;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _this.audio = audio;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(loadTexture('smoke.png'));\n\n          case 3:\n            texture = _context.sent;\n            material = new THREE.ShaderMaterial({\n              uniforms: {\n                uAudioBandsBuffer: {\n                  value: new Array(8).fill(0)\n                },\n                pointTexture: {\n                  value: texture\n                },\n                opacity: {\n                  value: 0.1\n                },\n                time: {\n                  value: 0.0\n                }\n              },\n              vertexShader: vertexShader,\n              fragmentShader: fragmentShader\n            });\n            material.transparent = true;\n            material.depthWrite = false;\n            material.blending = THREE.AdditiveBlending;\n            _this.points = new THREE.Points(geometry, material);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  this.update = function () {\n    var longitudes = _this.points.geometry.attributes.longitude.array;\n    var latitudes = _this.points.geometry.attributes.longitude.array;\n\n    for (var i in longitudes) {\n      longitudes[i] += array[i].speed;\n      latitudes[i] += array[i].speed;\n    }\n\n    _this.points.geometry.attributes.longitude.needsUpdate = true;\n    _this.points.geometry.attributes.latitude.needsUpdate = true;\n    _this.points.material.uniforms[\"uAudioBandsBuffer\"].value = _this.audio.getAudioBandsBuffer();\n  };\n};\n\nexport default Particles;","map":{"version":3,"sources":["/Users/alexiaperesson/site-aperesso/webgl/scene/particles.js"],"names":["THREE","loadTexture","vertexShader","fragmentShader","Particle","radius","Math","random","longitude","PI","latitude","speed","Particles","particlesCount","array","Array","fill","map","positions","particle","geometry","BufferGeometry","setAttribute","Float32BufferAttribute","setUp","audio","texture","material","ShaderMaterial","uniforms","uAudioBandsBuffer","value","pointTexture","opacity","time","transparent","depthWrite","blending","AdditiveBlending","points","Points","update","longitudes","attributes","latitudes","i","needsUpdate","getAudioBandsBuffer"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\n\nimport { loadTexture } from '../utils';\nimport { vertexShader, fragmentShader } from '../shaders/particles';\n\nconst Particle = function() {\n  this.radius = Math.random() * 6 + 10.0;\n  this.longitude = Math.random() * Math.PI;\n  this.latitude = Math.random() * Math.PI * 2.0;\n  this.speed = 0.001;\n}\n\nconst Particles = function() {\n  const particlesCount = 500;\n  const array = new Array(particlesCount).fill(null).map(() => new Particle())\n  const positions = new Array(particlesCount * 3).fill(0);\n  const radius = array.map(particle => particle.radius);\n  const longitude = array.map(particle => particle.longitude);\n  const latitude = array.map(particle => particle.latitude);\n  const speed = array.map(particle => particle.speed);\n\n  const geometry = new THREE.BufferGeometry();    \n  geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );\n  geometry.setAttribute( 'radius', new THREE.Float32BufferAttribute( radius, 1 ) );\n  geometry.setAttribute( 'longitude', new THREE.Float32BufferAttribute( longitude, 1 ) );\n  geometry.setAttribute( 'latitude', new THREE.Float32BufferAttribute( latitude, 1 ) );\n  geometry.setAttribute( 'speed', new THREE.Float32BufferAttribute( speed, 1 ) );\n\n  this.setUp = async audio => {\n    this.audio = audio;\n    const texture = await loadTexture('smoke.png');\n\n    const material = new THREE.ShaderMaterial({\n      uniforms : {\n          uAudioBandsBuffer : { value : new Array(8).fill(0) },\n          pointTexture : { value : texture },\n          opacity : { value : 0.1 },\n          time : { value : 0.0 }\n      },\n      vertexShader,\n      fragmentShader\n    })\n\n    material.transparent = true;\n    material.depthWrite = false;\n    material.blending = THREE.AdditiveBlending;\n\n    this.points = new THREE.Points(\n        geometry, \n        material,\n    );\n\n    \n  }\n\n  this.update = () => {\n    const longitudes = this.points.geometry.attributes.longitude.array;\n    const latitudes = this.points.geometry.attributes.longitude.array;\n    \n    for (let i in longitudes) {\n        longitudes[i] += array[i].speed;\n        latitudes[i] += array[i].speed;\n    }\n    \n    this.points.geometry.attributes.longitude.needsUpdate = true;\n    this.points.geometry.attributes.latitude.needsUpdate = true;\n\n    this.points.material.uniforms[\"uAudioBandsBuffer\"].value = this.audio.getAudioBandsBuffer();\n  }\n}\n\nexport default Particles;"]},"metadata":{},"sourceType":"module"}