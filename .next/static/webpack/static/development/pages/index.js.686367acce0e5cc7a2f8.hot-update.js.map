{"version":3,"file":"static/webpack/static/development/pages/index.js.686367acce0e5cc7a2f8.hot-update.js","sources":["webpack:///./webgl/scene/particles.js"],"sourcesContent":["import * as THREE from 'three'\n\nimport { loadTexture } from '../utils';\nimport { vertexShader, fragmentShader } from '../shaders/particles';\n\nconst Particle = function() {\n  this.radius = Math.random() * 6 + 10.0;\n  this.longitude = Math.random() * Math.PI;\n  this.latitude = Math.random() * Math.PI * 2.0;\n  this.speed = 0.001;\n}\n\nconst Particles = function() {\n  const particlesCount = 500;\n  const array = new Array(particlesCount).fill(null).map(() => new Particle())\n  const positions = new Array(particlesCount * 3).fill(0);\n  const radius = array.map(particle => particle.radius);\n  const longitude = array.map(particle => particle.longitude);\n  const latitude = array.map(particle => particle.latitude);\n  const speed = array.map(particle => particle.speed);\n\n  const geometry = new THREE.BufferGeometry();    \n  geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );\n  geometry.setAttribute( 'radius', new THREE.Float32BufferAttribute( radius, 1 ) );\n  geometry.setAttribute( 'longitude', new THREE.Float32BufferAttribute( longitude, 1 ) );\n  geometry.setAttribute( 'latitude', new THREE.Float32BufferAttribute( latitude, 1 ) );\n  geometry.setAttribute( 'speed', new THREE.Float32BufferAttribute( speed, 1 ) );\n\n  this.setUp = async audio => {\n    this.audio = audio;\n    const texture = await loadTexture('smoke.png');\n\n    const material = new THREE.ShaderMaterial({\n      uniforms : {\n          uAudioBandsBuffer : { value : new Array(8).fill(0) },\n          pointTexture : { value : texture },\n          opacity : { value : 0.1 },\n          time : { value : 0.0 }\n      },\n      vertexShader,\n      fragmentShader\n    })\n\n    material.transparent = true;\n    material.depthWrite = false;\n    material.blending = THREE.AdditiveBlending;\n\n    this.points = new THREE.Points(\n        geometry, \n        material,\n    );\n\n    \n  }\n\n  this.update = () => {\n    const longitudes = this.points.geometry.attributes.longitude.array;\n    const latitudes = this.points.geometry.attributes.longitude.array;\n    \n    for (let i in longitudes) {\n        longitudes[i] += array[i].speed;\n        latitudes[i] += array[i].speed;\n    }\n    \n    this.points.geometry.attributes.longitude.needsUpdate = true;\n    this.points.geometry.attributes.latitude.needsUpdate = true;\n\n    this.points.material.uniforms[\"uAudioBandsBuffer\"].value = this.audio.getAudioBandsBuffer();\n  }\n}\n\nexport default Particles;"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AARA;AAWA;AACA;AACA;AAEA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}