{"ast":null,"code":"import * as THREE from 'three';\nimport { CAMERA_SETTINGS } from './utils/settings';\nimport Audio from './utils/audio';\nimport { getDimensions } from './utils';\nimport Sphere from './scene/sphere';\nimport Particles from './scene/particles';\n\nconst WebGL = function () {\n  const canvas = document.getElementById('webGL');\n  const {\n    width,\n    height\n  } = getDimensions('webGL');\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(CAMERA_SETTINGS.fov, width / height, CAMERA_SETTINGS.near, CAMERA_SETTINGS.far);\n  camera.position.set(0, 0, 20);\n  const renderer = new THREE.WebGLRenderer({\n    canvas,\n    alpha: true\n  });\n  renderer.setSize(width, height);\n  renderer.setClearColor(new THREE.Color('#010101'), 1.);\n  renderer.shadowMap.enabled = true;\n  renderer.gammaFactor = 2.2;\n  renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n  renderer.toneMapping = THREE.ReinhardToneMapping;\n  const audio = new Audio();\n  const sphere = new Sphere();\n  const particles = new Particles();\n\n  this.load = async () => {\n    await audio.load();\n    sphere.setUp(audio);\n    scene.add(sphere.mesh);\n    await particles.setUp(audio);\n    scene.add(particles.points);\n  };\n\n  this.render = () => {\n    renderer.setAnimationLoop(() => {\n      audio.update();\n      sphere.update();\n      particles.update();\n      renderer.render(scene, camera);\n    });\n  };\n};\n\nexport default WebGL;","map":{"version":3,"sources":["/Users/alexiaperesson/site-aperesso/webgl/index.js"],"names":["THREE","CAMERA_SETTINGS","Audio","getDimensions","Sphere","Particles","WebGL","canvas","document","getElementById","width","height","scene","Scene","camera","PerspectiveCamera","fov","near","far","position","set","renderer","WebGLRenderer","alpha","setSize","setClearColor","Color","shadowMap","enabled","gammaFactor","type","PCFSoftShadowMap","toneMapping","ReinhardToneMapping","audio","sphere","particles","load","setUp","add","mesh","points","render","setAnimationLoop","update"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,eAAT,QAAgC,kBAAhC;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,SAASC,aAAT,QAA8B,SAA9B;AAEA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;;AAGA,MAAMC,KAAK,GAAG,YAAW;AACvB,QAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAf;AACA,QAAM;AAAEC,IAAAA,KAAF;AAAUC,IAAAA;AAAV,MAAqBR,aAAa,CAAC,OAAD,CAAxC;AAEA,QAAMS,KAAK,GAAG,IAAIZ,KAAK,CAACa,KAAV,EAAd;AACA,QAAMC,MAAM,GAAG,IAAId,KAAK,CAACe,iBAAV,CAA4Bd,eAAe,CAACe,GAA5C,EAAiDN,KAAK,GAAGC,MAAzD,EAAiEV,eAAe,CAACgB,IAAjF,EAAuFhB,eAAe,CAACiB,GAAvG,CAAf;AACAJ,EAAAA,MAAM,CAACK,QAAP,CAAgBC,GAAhB,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,EAAxB;AAEA,QAAMC,QAAQ,GAAG,IAAIrB,KAAK,CAACsB,aAAV,CAAwB;AAAEf,IAAAA,MAAF;AAAWgB,IAAAA,KAAK,EAAE;AAAlB,GAAxB,CAAjB;AACAF,EAAAA,QAAQ,CAACG,OAAT,CAAiBd,KAAjB,EAAwBC,MAAxB;AACAU,EAAAA,QAAQ,CAACI,aAAT,CAAuB,IAAIzB,KAAK,CAAC0B,KAAV,CAAgB,SAAhB,CAAvB,EAAmD,EAAnD;AACAL,EAAAA,QAAQ,CAACM,SAAT,CAAmBC,OAAnB,GAA6B,IAA7B;AACAP,EAAAA,QAAQ,CAACQ,WAAT,GAAuB,GAAvB;AACAR,EAAAA,QAAQ,CAACM,SAAT,CAAmBG,IAAnB,GAA0B9B,KAAK,CAAC+B,gBAAhC;AACAV,EAAAA,QAAQ,CAACW,WAAT,GAAuBhC,KAAK,CAACiC,mBAA7B;AAEA,QAAMC,KAAK,GAAG,IAAIhC,KAAJ,EAAd;AACA,QAAMiC,MAAM,GAAG,IAAI/B,MAAJ,EAAf;AACA,QAAMgC,SAAS,GAAG,IAAI/B,SAAJ,EAAlB;;AAEA,OAAKgC,IAAL,GAAY,YAAY;AACtB,UAAMH,KAAK,CAACG,IAAN,EAAN;AACAF,IAAAA,MAAM,CAACG,KAAP,CAAaJ,KAAb;AACAtB,IAAAA,KAAK,CAAC2B,GAAN,CAAUJ,MAAM,CAACK,IAAjB;AACA,UAAMJ,SAAS,CAACE,KAAV,CAAgBJ,KAAhB,CAAN;AACAtB,IAAAA,KAAK,CAAC2B,GAAN,CAAUH,SAAS,CAACK,MAApB;AACD,GAND;;AAQA,OAAKC,MAAL,GAAc,MAAM;AAClBrB,IAAAA,QAAQ,CAACsB,gBAAT,CACE,MAAM;AACJT,MAAAA,KAAK,CAACU,MAAN;AACAT,MAAAA,MAAM,CAACS,MAAP;AACAR,MAAAA,SAAS,CAACQ,MAAV;AACAvB,MAAAA,QAAQ,CAACqB,MAAT,CAAgB9B,KAAhB,EAAuBE,MAAvB;AACD,KANH;AAQD,GATD;AAUD,CAtCD;;AAwCA,eAAeR,KAAf","sourcesContent":["import * as THREE from 'three';\n  \nimport { CAMERA_SETTINGS } from './utils/settings';\nimport Audio from './utils/audio';\nimport { getDimensions } from './utils';\n\nimport Sphere from './scene/sphere';\nimport Particles from './scene/particles';\n\n\nconst WebGL = function() {\n  const canvas = document.getElementById('webGL');\n  const { width , height } = getDimensions('webGL');\n\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(CAMERA_SETTINGS.fov, width / height, CAMERA_SETTINGS.near, CAMERA_SETTINGS.far);\n  camera.position.set(0,0,20);\n\n  const renderer = new THREE.WebGLRenderer({ canvas , alpha: true });\n  renderer.setSize(width, height);\n  renderer.setClearColor(new THREE.Color('#010101'), 1.);\n  renderer.shadowMap.enabled = true;\n  renderer.gammaFactor = 2.2;\n  renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n  renderer.toneMapping = THREE.ReinhardToneMapping;\n\n  const audio = new Audio();\n  const sphere = new Sphere();\n  const particles = new Particles();\n\n  this.load = async () => {\n    await audio.load();\n    sphere.setUp(audio);\n    scene.add(sphere.mesh);\n    await particles.setUp(audio);\n    scene.add(particles.points);\n  }\n\n  this.render = () => {\n    renderer.setAnimationLoop(\n      () => {\n        audio.update();\n        sphere.update();\n        particles.update();\n        renderer.render(scene, camera);\n      }\n    )\n  }\n}\n\nexport default WebGL;"]},"metadata":{},"sourceType":"module"}