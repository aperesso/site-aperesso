{"ast":null,"code":"var vertexShader = \"\\n//\\tSimplex 3D Noise \\n//\\tby Ian McEwan, Ashima Arts\\n//\\nvec4 permute(vec4 x) { return mod(((x*34.0)+1.0)*x, 289.0);}\\nvec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r;}\\n\\nfloat snoise(vec3 v) { \\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g;\\n  vec3 i1 = min( g.xyz, l.zxy );\\n  vec3 i2 = max( g.xyz, l.zxy );\\n\\n  //  x0 = x0 - 0. + 0.0 * C \\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\\n\\n// Permutations\\n  i = mod(i, 289.0 ); \\n  vec4 p = permute( permute( permute( \\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients\\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\\n  float n_ = 1.0/7.0; // N=7\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \\n                                dot(p2,x2), dot(p3,x3) ) );\\n}\\n\\nvarying vec3 vNormal;\\nvarying vec3 vPos;\\n\\nattribute vec3 tangent;\\n\\nuniform vec3 uNoiseOffset;\\nuniform float uNoiseScale;\\nuniform float uNoiseFrequency;\\nuniform float uTime;\\nuniform float uAudioBandsBuffer[8];\\n\\nvarying float average;\\n\\nvoid main() {\\n\\n  vec3 v0 = position;\\n  vec3 bitangent = cross(normal, tangent);\\n  vec3 v1 = v0 + (tangent * 0.01);\\n  vec3 v2 = v0 + (bitangent * 0.01);\\n\\n \\n  average = (uAudioBandsBuffer[0] + uAudioBandsBuffer[1] + uAudioBandsBuffer[2] + uAudioBandsBuffer[3] +\\n    uAudioBandsBuffer[4] + uAudioBandsBuffer[5] + uAudioBandsBuffer[6] + uAudioBandsBuffer[7]) / 8.0;\\n\\n  float noiseSc =    3.0 * average;\\n  float noiseFreq =  0.5 * average ;\\n  \\n\\n  float ns0 =  noiseSc *  snoise(vec3(v0.x + uNoiseOffset.x, v0.y + uNoiseOffset.y, v0.z + uNoiseOffset.z) * noiseFreq );\\n  v0 += ((ns0 - 1.)/2.) * normal;\\n\\n  float ns1 = noiseSc *  snoise(vec3(v1.x + uNoiseOffset.x, v1.y + uNoiseOffset.y, v1.z + uNoiseOffset.z) * noiseFreq );\\n  v1 += ((ns1 - 1.)/2.) * normal;\\n\\n  float ns2 =  noiseSc * snoise(vec3(v2.x + uNoiseOffset.x, v2.y + uNoiseOffset.y, v2.z + uNoiseOffset.z) * noiseFreq );\\n  v2+= ((ns2 - 1.)/2.) * normal;\\n\\n  vec3 vn = cross(v2- v0, v1 - v0);\\n  vNormal = normalize(-vn);\\n\\n  vec4 modelViewPosition = modelViewMatrix * vec4( v0 , 1.0);\\n  vPos = vec3(modelMatrix * vec4(v0, 1.0));\\n \\n  gl_Position = projectionMatrix * modelViewPosition;\\n}\\n\";\nvar fragmentShader = \"\\nvarying vec3    vPos;\\nvarying vec3    vNormal;\\n\\nuniform vec3    uLightPosition;\\nuniform vec3    uLightDiffuse;\\nuniform vec3    uLightAmbient;\\nuniform vec3    uLightSpecular;\\n\\nuniform vec3    uMaterialAmbientA;\\nuniform vec3    uMaterialAmbientB;\\nuniform vec3    uMaterialDiffuseA;\\nuniform vec3    uMaterialDiffuseB;\\nuniform vec3    uMaterialSpecularA;\\nuniform vec3    uMaterialSpecularB;\\nuniform float   uMaterialShininess;\\nuniform float   uTime;\\n\\nuniform float uAudioBandsBuffer[8];\\n\\nvarying float average;\\n\\nvoid main() {\\n\\n    // vec3    colorAmbient = vec3(1.0 - ((uAudioBandsBuffer[6] + uAudioBandsBuffer[7]) / 2.0));\\n    // vec3    colorAmbient = mix(uMateri+alAmbientA, uMaterialAmbientB, max(average, 0.2));\\n\\n\\n    float testcol = (uAudioBandsBuffer[6] + uAudioBandsBuffer[7] + uAudioBandsBuffer[5] ) / 3.0;\\n    vec3  colorAmbient = vec3(testcol * uMaterialAmbientA);\\n\\n    vec3    ambient =  uLightAmbient * colorAmbient;\\n\\n    vec3 colorDiffuse = vec3(testcol * uMaterialDiffuseA);\\n\\n    // vec3    colorDiffuse = mix(uMaterialDiffuseA, uMaterialDiffuseB, max(average, 0.2));\\n    // vec3    colorDiffuse = vec3(.8 - ((uAudioBandsBuffer[0] + uAudioBandsBuffer[1] + uAudioBandsBuffer[2] ) / 3.0));\\n    vec3    lightDirection = normalize(uLightPosition - vPos);\\n    float   diffuseIntensity =  max(dot(vNormal, lightDirection), 0.0);\\n    vec3    diffuse = uLightDiffuse * (diffuseIntensity * colorDiffuse);\\n\\n    vec3    colorSpecular = mix(uMaterialSpecularA, uMaterialSpecularB, max(average, 0.2));\\n    vec3    viewDirection = normalize(cameraPosition - vPos);\\n    vec3    reflectDirection = reflect(-lightDirection, vNormal);\\n    float   specularIntensity = pow(max(dot(viewDirection, reflectDirection), 0.0), uMaterialShininess);\\n    vec3    specular = uLightSpecular * (specularIntensity * colorSpecular);\\n\\n    vec3 color = ambient + diffuse + specular;\\n    gl_FragColor = vec4(color, 1.);\\n}\\n\";\nexport { vertexShader, fragmentShader };","map":{"version":3,"sources":["/Users/alexiaperesson/site-aperesso/webgl/shaders/sphere.js"],"names":["vertexShader","fragmentShader"],"mappings":"AAAA,IAAMA,YAAY,k+GAAlB;AA2HA,IAAMC,cAAc,g6DAApB;AAoDA,SACED,YADF,EAEEC,cAFF","sourcesContent":["const vertexShader = `\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x) { return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v) { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nvarying vec3 vNormal;\nvarying vec3 vPos;\n\nattribute vec3 tangent;\n\nuniform vec3 uNoiseOffset;\nuniform float uNoiseScale;\nuniform float uNoiseFrequency;\nuniform float uTime;\nuniform float uAudioBandsBuffer[8];\n\nvarying float average;\n\nvoid main() {\n\n  vec3 v0 = position;\n  vec3 bitangent = cross(normal, tangent);\n  vec3 v1 = v0 + (tangent * 0.01);\n  vec3 v2 = v0 + (bitangent * 0.01);\n\n \n  average = (uAudioBandsBuffer[0] + uAudioBandsBuffer[1] + uAudioBandsBuffer[2] + uAudioBandsBuffer[3] +\n    uAudioBandsBuffer[4] + uAudioBandsBuffer[5] + uAudioBandsBuffer[6] + uAudioBandsBuffer[7]) / 8.0;\n\n  float noiseSc =    3.0 * average;\n  float noiseFreq =  0.5 * average ;\n  \n\n  float ns0 =  noiseSc *  snoise(vec3(v0.x + uNoiseOffset.x, v0.y + uNoiseOffset.y, v0.z + uNoiseOffset.z) * noiseFreq );\n  v0 += ((ns0 - 1.)/2.) * normal;\n\n  float ns1 = noiseSc *  snoise(vec3(v1.x + uNoiseOffset.x, v1.y + uNoiseOffset.y, v1.z + uNoiseOffset.z) * noiseFreq );\n  v1 += ((ns1 - 1.)/2.) * normal;\n\n  float ns2 =  noiseSc * snoise(vec3(v2.x + uNoiseOffset.x, v2.y + uNoiseOffset.y, v2.z + uNoiseOffset.z) * noiseFreq );\n  v2+= ((ns2 - 1.)/2.) * normal;\n\n  vec3 vn = cross(v2- v0, v1 - v0);\n  vNormal = normalize(-vn);\n\n  vec4 modelViewPosition = modelViewMatrix * vec4( v0 , 1.0);\n  vPos = vec3(modelMatrix * vec4(v0, 1.0));\n \n  gl_Position = projectionMatrix * modelViewPosition;\n}\n`\n\nconst fragmentShader = `\nvarying vec3    vPos;\nvarying vec3    vNormal;\n\nuniform vec3    uLightPosition;\nuniform vec3    uLightDiffuse;\nuniform vec3    uLightAmbient;\nuniform vec3    uLightSpecular;\n\nuniform vec3    uMaterialAmbientA;\nuniform vec3    uMaterialAmbientB;\nuniform vec3    uMaterialDiffuseA;\nuniform vec3    uMaterialDiffuseB;\nuniform vec3    uMaterialSpecularA;\nuniform vec3    uMaterialSpecularB;\nuniform float   uMaterialShininess;\nuniform float   uTime;\n\nuniform float uAudioBandsBuffer[8];\n\nvarying float average;\n\nvoid main() {\n\n    // vec3    colorAmbient = vec3(1.0 - ((uAudioBandsBuffer[6] + uAudioBandsBuffer[7]) / 2.0));\n    // vec3    colorAmbient = mix(uMateri+alAmbientA, uMaterialAmbientB, max(average, 0.2));\n\n\n    float testcol = (uAudioBandsBuffer[6] + uAudioBandsBuffer[7] + uAudioBandsBuffer[5] ) / 3.0;\n    vec3  colorAmbient = vec3(testcol * uMaterialAmbientA);\n\n    vec3    ambient =  uLightAmbient * colorAmbient;\n\n    vec3 colorDiffuse = vec3(testcol * uMaterialDiffuseA);\n\n    // vec3    colorDiffuse = mix(uMaterialDiffuseA, uMaterialDiffuseB, max(average, 0.2));\n    // vec3    colorDiffuse = vec3(.8 - ((uAudioBandsBuffer[0] + uAudioBandsBuffer[1] + uAudioBandsBuffer[2] ) / 3.0));\n    vec3    lightDirection = normalize(uLightPosition - vPos);\n    float   diffuseIntensity =  max(dot(vNormal, lightDirection), 0.0);\n    vec3    diffuse = uLightDiffuse * (diffuseIntensity * colorDiffuse);\n\n    vec3    colorSpecular = mix(uMaterialSpecularA, uMaterialSpecularB, max(average, 0.2));\n    vec3    viewDirection = normalize(cameraPosition - vPos);\n    vec3    reflectDirection = reflect(-lightDirection, vNormal);\n    float   specularIntensity = pow(max(dot(viewDirection, reflectDirection), 0.0), uMaterialShininess);\n    vec3    specular = uLightSpecular * (specularIntensity * colorSpecular);\n\n    vec3 color = ambient + diffuse + specular;\n    gl_FragColor = vec4(color, 1.);\n}\n`\n\nexport {\n  vertexShader,\n  fragmentShader\n}"]},"metadata":{},"sourceType":"module"}