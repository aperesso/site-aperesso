{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport * as THREE from 'three';\nimport * as settings from './settings';\n\nvar Gui = function Gui() {\n  var dat = require('dat.gui');\n\n  var gui = new dat.GUI();\n\n  this.setUpSphereDashboard = function (sphere) {\n    var SPHERE_SETTINGS = settings.SPHERE_SETTINGS,\n        GUI_SPHERE_SETTINGS = settings.GUI_SPHERE_SETTINGS;\n    var dashboard = gui.addFolder('sphere');\n\n    _Object$keys(GUI_SPHERE_SETTINGS).forEach(function (folderKey) {\n      var folder = dashboard.addFolder(folderKey);\n      var folderSettings = GUI_SPHERE_SETTINGS[folderKey];\n\n      _Object$keys(folderSettings).forEach(function (key) {\n        var type = folderSettings[key].type;\n\n        if (type === 'range') {\n          folder.add(SPHERE_SETTINGS, key, folderSettings[key].range[0], folderSettings[key].range[1]).onChange(function (value) {\n            var uniform = \"u\".concat(key[0].toUpperCase()).concat(key.slice(1));\n            sphere.mesh.material.uniforms[uniform].value = value;\n          });\n          return;\n        }\n\n        if (type === 'vector3') {\n          var vectorFolder = folder.addFolder(key);\n          ['x', 'y', 'z'].forEach(function (c) {\n            vectorFolder.add.apply(vectorFolder, [SPHERE_SETTINGS[key], c].concat(_toConsumableArray(folderSettings[key].range))).onChange(function (value) {\n              var uniform = \"u\".concat(key[0].toUpperCase()).concat(key.slice(1));\n              sphere.mesh.material.uniforms[uniform].value[c] = value;\n            });\n          });\n        }\n\n        if (type === 'color') {\n          folder.addColor(SPHERE_SETTINGS, key).onChange(function (value) {\n            var uniform = \"u\".concat(key[0].toUpperCase()).concat(key.slice(1));\n            sphere.mesh.material.uniforms[uniform].value = new THREE.Color(value);\n          });\n        }\n      });\n    });\n  };\n};\n\nexport default Gui;","map":{"version":3,"sources":["/Users/alexiaperesson/site-aperesso/webgl/utils/gui.js"],"names":["THREE","settings","Gui","dat","require","gui","GUI","setUpSphereDashboard","sphere","SPHERE_SETTINGS","GUI_SPHERE_SETTINGS","dashboard","addFolder","forEach","folderKey","folder","folderSettings","key","type","add","range","onChange","value","uniform","toUpperCase","slice","mesh","material","uniforms","vectorFolder","c","addColor","Color"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport * as settings from './settings';\n\n\nconst Gui = function() {\n\n  const dat = require('dat.gui');\n  const gui = new dat.GUI();\n\n  this.setUpSphereDashboard = sphere => {\n    const { SPHERE_SETTINGS , GUI_SPHERE_SETTINGS } = settings;\n        \n    const dashboard = gui.addFolder('sphere');\n    Object.keys(GUI_SPHERE_SETTINGS).forEach(\n        folderKey => {\n            const folder = dashboard.addFolder(folderKey);\n            const folderSettings = GUI_SPHERE_SETTINGS[folderKey];\n    \n            Object.keys(folderSettings).forEach(\n                key => {\n                    const { [ key ] : { type } } = folderSettings;\n\n                    if (type === 'range') {\n                        folder.add(\n                            SPHERE_SETTINGS,\n                            key,\n                            folderSettings[key].range[0],\n                            folderSettings[key].range[1]\n                        ).onChange(\n                            value => {\n                                const uniform = `u${key[0].toUpperCase()}${key.slice(1)}`;\n                                sphere.mesh.material.uniforms[uniform].value = value\n                            }\n                        )\n                        return ;\n                    }\n\n                    if (type === 'vector3') {\n                        const vectorFolder = folder.addFolder(key);\n\n                        ['x','y','z'].forEach(c => {\n                            vectorFolder.add(\n                                SPHERE_SETTINGS[key],\n                                c,\n                                ...folderSettings[key].range\n                            ).onChange(\n                                value => {\n                                    const uniform = `u${key[0].toUpperCase()}${key.slice(1)}`;\n                                    sphere.mesh.material.uniforms[uniform].value[c] = value;\n                                }\n                            )\n                        })\n                    }\n\n                    if (type === 'color') {\n                        folder.addColor(\n                            SPHERE_SETTINGS,\n                            key\n                        ).onChange(\n                            value => {\n                                const uniform = `u${key[0].toUpperCase()}${key.slice(1)}`;\n                                sphere.mesh.material.uniforms[uniform].value = new THREE.Color(value);\n                            }\n                        )\n                    }\n                }\n            )\n        }\n    )\n  }\n}\n\nexport default Gui;"]},"metadata":{},"sourceType":"module"}